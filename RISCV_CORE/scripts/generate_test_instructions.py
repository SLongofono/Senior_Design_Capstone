import collections

Results = collections.OrderedDict([
("00000000","instr_LUI"),
("00000001","instr_AUIPC"),
("00000010","instr_JAL"),
("00000011","instr_JALR"),
("00000100","instr_BEQ"),
("00000101","instr_BNE"),
("00000110","instr_BLT"),
("00000111","instr_BGE"),
("00001000","instr_BLTU"),
("00001001","instr_BGEU"),
("00001010","instr_LB"),
("00001011","instr_LH"),
("00001100","instr_LW"),
("00001101","instr_LBU"),
("00001110","instr_LHU"),
("00001111","instr_SB"),
("00010000","instr_SH"),
("00010001","instr_SW"),
("00010010","instr_ADDI"),
("00010011","instr_SLTI"),
("00010100","instr_SLTIU"),
("00010101","instr_XORI"),
("00010110","instr_ORI"),
("00010111","instr_ANDI"),
("00011000","instr_SLLI"),
("00011001","instr_SRLI"),
("00011010","instr_SRAI"),
("00011011","instr_ADD"),
("00011100","instr_SUB"),
("00011101","instr_SLL"),
("00011110","instr_SLT"),
("00011111","instr_SLTU"),
("00100000","instr_XOR"),
("00100001","instr_SRL"),
("00100010","instr_SRA"),
("00100011","instr_OR"),
("00100100","instr_AND"),
("00100101","instr_FENCE"),
("00100110","instr_FENCEI"),
("00100111","instr_ECALL"),
("00101000","instr_EBREAK"),
("00101001","instr_CSRRW"),
("00101010","instr_CSRRS"),
("00101011","instr_CSRRC"),
("00101100","instr_CSRRWI"),
("00101101","instr_CSRRSI"),
("00101110","instr_CSRRCI"),
("00101111","instr_LWU"),
("00110000","instr_LD"),
("00110001","instr_SD"),
("00110010","instr_SLLI6"),
("00110011","instr_SRLI6"),
("00110100","instr_SRAI6"),
("00110101","instr_ADDIW"),
("00110110","instr_SLLIW"),
("00110111","instr_SRLIW"),
("00111000","instr_SRAIW"),
("00111001","instr_ADDW"),
("00111010","instr_SUBW"),
("00111011","instr_SLLW"),
("00111100","instr_SRLW"),
("00111101","instr_SRAW"),
("00111110","instr_MUL"),
("00111111","instr_MULH"),
("01000000","instr_MULHSU"),
("01000001","instr_MULHU"),
("01000010","instr_DIV"),
("01000011","instr_DIVU"),
("01000100","instr_REM"),
("01000101","instr_REMU"),
("01000110","instr_MULW"),
("01000111","instr_DIVW"),
("01001000","instr_DIVUW"),
("01001001","instr_REMW"),
("01001010","instr_REMUW"),
("01001011","instr_LRW"),
("01001100","instr_SCW"),
("01001101","instr_AMOSWAPW"),
("01001110","instr_AMOADDW"),
("01001111","instr_AMOXORW"),
("01010000","instr_AMOANDW"),
("01010001","instr_AMOORW"),
("01010010","instr_AMOMINW"),
("01010011","instr_AMOMAXW"),
("01010100","instr_AMOMINUW"),
("01010101","instr_AMOMAXUW"),
("01010110","instr_LRD"),
("01010111","instr_SCD"),
("01011000","instr_AMOSWAPD"),
("01011001","instr_AMOADDD"),
("01011010","instr_AMOXORD"),
("01011011","instr_AMOANDD"),
("01011100","instr_AMOORD"),
("01011101","instr_AMOMIND"),
("01011110","instr_AMOMAXD"),
("01011111","instr_AMOMINUD"),
("01100000","instr_AMOMAXUD"),
("01100001","instr_FLW"),
("01100010","instr_FSW"),
("01100011","instr_FMADDS"),
("01100100","instr_FMSUBS"),
("01100101","instr_FNMSUBS"),
("01100110","instr_FNMADDS"),
("01100111","instr_FADDS"),
("01101000","instr_FSUBS"),
("01101001","instr_FMULS"),
("01101010","instr_FDIVS"),
("01101011","instr_FSQRTS"),
("01101100","instr_FSGNJS"),
("01101101","instr_FSGNJNS"),
("01101110","instr_FSGNJXS"),
("01101111","instr_FMINS"),
("01110000","instr_FMAXS"),
("01110001","instr_FCVTWS"),
("01110010","instr_FCVTWUS"),
("01110011","instr_FMVXW"),
("01110100","instr_FEQS"),
("01110101","instr_FLTS"),
("01110110","instr_FLES"),
("01110111","instr_FCLASSS"),
("01111000","instr_FCVTSW"),
("01111001","instr_FCVTSWU"),
("01111010","instr_FMVWX"),
("01111011","instr_FCVTLS"),
("01111100","instr_FCVTLUS"),
("01111101","instr_FCVTSL"),
("01111110","instr_FCVTSLU"),
("01111111","instr_FLD"),
("10000000","instr_FSD"),
("10000001","instr_FMADDD"),
("10000010","instr_FMSUBD"),
("10000011","instr_FNMSUBD"),
("10000100","instr_FNMADDD"),
("10000101","instr_FADDD"),
("10000110","instr_FSUBD"),
("10000111","instr_FMULD"),
("10001000","instr_FDIVD"),
("10001001","instr_FSQRTD"),
("10001010","instr_FSGNJD"),
("10001011","instr_FSGNJND"),
("10001100","instr_FSGNJXD"),
("10001101","instr_FMIND"),
("10001110","instr_FMAXD"),
("10001111","instr_FCVTSD"),
("10010000","instr_FCVTDS"),
("10010001","instr_FEQD"),
("10010010","instr_FLTD"),
("10010011","instr_FLED"),
("10010100","instr_FCLASSD"),
("10010101","instr_FCVTWD"),
("10010110","instr_FCVTWUD"),
("10010111","instr_FCVTDW"),
("10011000","instr_FCVTDWU"),
("10011001","instr_FCVTLD"),
("10011010","instr_FCVTLUD"),
("10011011","instr_FMVXD"),
("10011100","instr_FCVTDL"),
("10011101","instr_FCVTDLU"),
("10011110","instr_FMVDX"),
("10011111","instr_URET"),
("10100000","instr_SRET"),
("10100001","instr_MRET"),
("10100010","instr_WFI"),
("10100011","instr_SFENCEVM")
])


Instructions = collections.OrderedDict([
("LUI",0x37),
("AUIPC",0x17),
("JAL",0x6f),
("JALR",0x67),
("BEQ",0x63),
("BNE",0x1063),
("BLT",0x4063),
("BGE",0x5063),
("BLTU",0x6063),
("BGEU",0x7063),
("LB",0x3),
("LH",0x1003),
("LW",0x2003),
("LBU",0x4003),
("LHU",0x5003),
("SB",0x23),
("SH",0x1023),
("SW",0x2023),
("ADDI",0x13),
("SLTI",0x2013),
("SLTIU",0x3013),
("XORI",0x4013),
("ORI",0x6013),
("ANDI",0x7013),
("SLLI",0x1013),
("SRLI",0x5013),
("SRAI",0x40005013),
("ADD",0x33),
("SUB",0x40000033),
("SLL",0x1033),
("SLT",0x2033),
("SLTU",0x3033),
("XOR",0x4033),
("SRL",0x5033),
("SRA",0x40005033),
("OR",0x6033),
("AND",0x7033),
("FENCE",0xf),
("FENCE_I",0x100f),
("ECALL",0x73),
("EBREAK",0x100073),
("CSRRW",0x1073),
("CSRRS",0x2073),
("CSRRC",0x3073),
("CSRRWI",0x5073),
("CSRRSI",0x6073),
("CSRRCI",0x7073),
("LWU",0x6003),
("LD",0x3003),
("SD",0x3023),
("SLLI6",0x1013),
("SRLI6",0x5013),
("SRAI6",0x40005013),
("ADDIW",0x1b),
("SLLIW",0x101b),
("SRLIW",0x501b),
("SRAIW",0x4000501b),
("ADDW",0x3b),
("SUBW",0x4000003b),
("SLLW",0x103b),
("SRLW",0x503b),
("SRAW",0x4000503b),
("MUL",0x2000033),
("MULH",0x2001033),
("MULHSU",0x2002033),
("MULHU",0x2003033),
("DIV",0x2004033),
("DIVU",0x2005033),
("REM",0x2006033),
("REMU",0x2007033),
("MULW",0x200003b),
("DIVW",0x200403b),
("DIVUW",0x200503b),
("REMW",0x200603b),
("REMUW",0x200703b),
("LR_W",0x1000202f),
("SC_W",0x1800202f),
("AMOSWAP_W",0x800202f),
("AMOADD_W",0x202f),
("AMOXOR_W",0x2000202f),
("AMOAND_W",0x6000202f),
("AMOOR_W",0x4000202f),
("AMOMIN_W",0x8000202f),
("AMOMAX_W",0xa000202f),
("AMOMINU_W",0xc000202f),
("AMOMAXU_W",0xe000202f),
("LR_D",0x1000302f),
("SC_D",0x1800302f),
("AMOSWAP_D",0x800302f),
("AMOADD_D",0x302f),
("AMOXOR_D",0x2000302f),
("AMOAND_D",0x6000302f),
("AMOOR_D",0x4000302f),
("AMOMIN_D",0x8000302f),
("AMOMAX_D",0xa000302f),
("AMOMINU_D",0xc000302f),
("AMOMAXU_D",0xe000302f),
("FLW",0x2007),
("FSW",0x2027),
("FMADD_S",0x43),
("FMSUB_S",0x47),
("FNMSUB_S",0x4b),
("FNMADD_S",0x4f),
("FADD_S",0x53),
("FSUB_S",0x8000053),
("FMUL_S",0x10000053),
("FDIV_S",0x18000053),
("FSQRT_S",0x58000053),
("FSGNJ_S",0x20000053),
("FSGNJN_S",0x20001053),
("FSGNJX_S",0x20002053),
("FMIN_S",0x28000053),
("FMAX_S",0x28001053),
("FCVT_W_S",0xc0000053),
("FCVT_WU_S",0xc0100053),
("FMV_X_W",0xe0000053),
("FEQ_S",0xa0002053),
("FLT_S",0xa0001053),
("FLE_S",0xa0000053),
("FCLASS_S",0xe0001053),
("FCVT_S_W",0xd0000053),
("FCVT_S_WU",0xd0100053),
("FMV_W_X",0xf0000053),
("FCVT_L_S",0xc0200053),
("FCVT_LU_S",0xc0300053),
("FCVT_S_L",0xd0200053),
("FCVT_S_LU",0xd0300053),
("FLD",0x3007),
("FSD",0x3027),
("FMADD_D",0x2000043),
("FMSUB_D",0x2000047),
("FNMSUB_D",0x200004b),
("FNMADD_D",0x200004f),
("FADD_D",0x2000053),
("FSUB_D",0xa000053),
("FMUL_D",0x12000053),
("FDIV_D",0x1a000053),
("FSQRT_D",0x5a000053),
("FSGNJ_D",0x22000053),
("FSGNJN_D",0x22001053),
("FSGNJX_D",0x22002053),
("FMIN_D",0x2a000053),
("FMAX_D",0x2a001053),
("FCVT_S_D",0x40100053),
("FCVT_D_S",0x42000053),
("FEQ_D",0xa2002053),
("FLT_D",0xa2001053),
("FLE_D",0xa2000053),
("FCLASS_D",0xe2001053),
("FCVT_W_D",0xc2000053),
("FCVT_WU_D",0xc2100053),
("FCVT_D_W",0xd2000053),
("FCVT_D_WU",0xd2100053),
("FCVT_L_D",0xc2200053),
("FCVT_LU_D",0xc2300053),
("FMV_X_D",0xe2000053),
("FCVT_D_L",0xd2200053),
("FCVT_D_LU",0xd2300053),
("FMV_D_X",0xf2000053),
("URET",0x200073),
("SRET",0x10200073),
("MRET",0x30200073),
("WFI",0x10500073),
("SFENCE_VMA",0x12000073)
])

def print_input(mapping):
    for name, bin_num in mapping.items():
        print('{}'.format(format(bin_num,'032b')))

def print_result(translation):
    for encoding, name in translation.items():
        print("{}\t:{}".format(encoding, name))
    

# Prints input instructions
print_input(Instructions)

# Prints matching order results
print_result(Results)
